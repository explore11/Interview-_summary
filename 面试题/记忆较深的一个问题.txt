问题：因为在项目上很多的地方，都需要用到时间转换的方法，所以我就时间转换抽出来了一个工具类，把SimpleDateFormat定义为一个静态属性，并提供了一个时间转换的方法，
本地测试也是通过的。但是在真正使用的时候，有的时候会报出来莫名其妙的数据错误或者抛出异常的现象（for input String “”，empty String）。

原因：SimpleDateFormat类内部有一个Calendar对象引用,它用来储存和这个SimpleDateFormat相关的日期信息，如果你的SimpleDateFormat是个static的,
那么多个thread 之间就会共享这个SimpleDateFormat，同时也是共享这个Calendar引用，
但是在一个线程在解析完日期后，会清楚这个Calendar引用，所以也就导致了下一个线程进来进行日期转换的时候，报出没有格式信息的异常。

解决方式：
1、转换的方法加锁
2、将SimpleDateFormat定义成局部变量。
3、ThreadLocal，也叫做线程本地变量或者线程本地存储，每个线程自己的
4、使用DateTimeFormatter 代替 SimpleDateFormat




package com.atguigu.itdachang;

import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * @auther zzyy
 * @create 2020-07-17 16:42
 */
public class DateUtils
{
    public static final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    /**
     * 模拟并发环境下使用SimpleDateFormat的parse方法将字符串转换成Date对象
     * @param stringDate
     * @return
     * @throws Exception
     */
    public static Date parseDate(String stringDate)throws Exception
    {
        return sdf.parse(stringDate);
    }
    
    public static void main(String[] args) throws Exception
    {
        for (int i = 1; i <=30; i++) {
            new Thread(() -> {
                try {
                    System.out.println(DateUtils.parseDate("2020-11-11 11:11:11"));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            },String.valueOf(i)).start();
        }
    }
}
 
 




用户登录之后，会把登陆后的用户信息存放到session中，并把session放到cookies中，发请求的时候携带，在这个请求接口中，
由于业务问题  又需要调用其他服务的请求，而远程调用的接口，需要登录后才能去访问，未登录的话  直接到登录页面，


我登录之后，去查看优惠券时，总会要到登录页面
我发生的现象是
用户是登录状态的，但是远程调用接口时，总是失败,去登录页？


用户登录之后,需要在查看自己用户信息的时候，出现的一个问题，

就是说 



用户信息和优惠信息是两个不同的项目，分别独立部署的，请求的是一个查看用户全部信息的一个接口，这个用户的全部信息中包含了积分和优惠券的有关数据，
所以接口中使用feign进行远程调用。

在这个查询全部信息的接口中，有个用户是否登录的校验，就是用sessionid去查询数据是否存在，在查询全部信息的接口中，可以通过校验，
但是在远程调用的时候，数据结果总是出现问题，返回来的时候错误数据，后来断点调试了一下，发现是在他的接口那边也进行了用户校验，
请求的时候没有，头信息中没有找到cookies造成的问题，因为接口没有太多的业务，所以就很快的定位到了Feign的接口调用那边，发现是feign接口
调用的时候造成的cookies丢失的。

后来扒了一下源码发现，在feign的请求调用过程中，又创建了一个新的请求，这个请求是根据请求模板(RequestTemplate)创建的，又经过了一系列的请求拦截器
才形成了一个新的请求对象。



当一个接口中，有多个feign进行远程调用时，使用异步编排，设置拦截器，在每个feign都需要从当前线程中获取当前的参数cookies信息重新设置请求头
发现全部获取请求参数失败，
原因是RequestContextHolder 的底层是threadLocal 获取当前线程的，而异步编排是多个线程并发执行 主线程的信息并未在其他的线程中保存
解决办法  在发出异步请求的时候 ，同步一下threadLocal中的数据



后来给改了一下  让接口中的调用进行异步编排  发现拦截器那边 获取不到 RequestContextHolder 当前线程的数据 
后来












